name: Build and Publish Docker Image

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/ddk-tools

jobs:
  prepare:
    runs-on: [self-hosted, Linux, X64, dmz]
    outputs:
      sha: ${{ steps.vars.outputs.sha }}
    steps:
      - name: Set short SHA
        id: vars
        run: echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

  build:
    needs: [prepare]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: X64
            php: 84
            alpine: 3.21.3
          - platform: linux/amd64
            arch: X64
            php: 83
            alpine: 3.21.3
          - platform: linux/amd64
            arch: X64
            php: 82
            alpine: 3.21.3
          - platform: linux/amd64
            arch: X64
            php: 81
            alpine: 3.19.7
          - platform: linux/arm64
            arch: ARM64
            php: 84
            alpine: 3.21.3
          - platform: linux/arm64
            arch: ARM64
            php: 83
            alpine: 3.21.3
          - platform: linux/arm64
            arch: ARM64
            php: 82
            alpine: 3.21.3
          - platform: linux/arm64
            arch: ARM64
            php: 81
            alpine: 3.19.7
      fail-fast: false
    runs-on:
      - self-hosted
      - Linux
      - ${{ matrix.arch }}
      - dmz
    steps:
      - uses: actions/checkout@v4
      - name: Docker Login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          builder: dmzbuilder
          platforms: ${{ matrix.platform }}
          push: true
          provenance: true
          sbom: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          build-args: |
            BUILD_VER=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            PHP_VER=${{ matrix.php }}
            ALPINE_VER=${{ matrix.alpine }}

      - name: Test image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }} composer -V
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }} composer-normalize -V
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }} parallel-lint -V

  publish:
    needs: [prepare, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Linux, X64, dmz]
    strategy:
      matrix:
        php: [81, 82, 83, 84]
    steps:
      - name: Docker Login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Create manifest for PHP ${{ matrix.php }}
        run: |
          FINAL_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}"
          docker buildx imagetools create -t "${FINAL_TAG}" \
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}-amd64" \
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}-arm64"

      - name: Cleanup tech tags for PHP ${{ matrix.php }}
        run: |
          for arch in amd64 arm64; do
            curl -s -X DELETE \
              -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}" \
              "https://hub.docker.com/v2/repositories/${{ vars.DOCKERHUB_USERNAME }}/ddk-tools/tags/${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}-${arch}"
          done

      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH,MEDIUM

  release:
    needs: [prepare]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: [self-hosted, Linux, X64, dmz]
    strategy:
      matrix:
        php: [81, 82, 83, 84]
    steps:
      - name: Docker Login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Tag PHP-specific release versions
        run: |
          TAG="${GITHUB_REF#refs/tags/}"

          # Create PHP-specific version tags
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-php${{ matrix.php }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}

      - name: Cleanup temporary tags
        run: |
          # Delete the temporary SHA-tagged images
          curl -s -X DELETE \
            -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}" \
            "https://hub.docker.com/v2/repositories/${{ vars.DOCKERHUB_USERNAME }}/ddk-tools/tags/${{ needs.prepare.outputs.sha }}-php${{ matrix.php }}"
